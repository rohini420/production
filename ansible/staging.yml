# ansible/staging.yml
- hosts: staging
  become: yes
  vars:
    image_tar: /tmp/employee-dir.tar
    image_name: employee-dir
    image_tag: "0.1"
    container_name: app_staging
  tasks:
    - name: Ensure Docker, Nginx, and Python Docker SDK are present
      apt:
        name:
          - docker.io
          - nginx
          - python3-docker
        state: present
        update_cache: yes

    - name: Copy image tarball to server
      copy:
        src: "{{ image_tar }}"
        dest: "{{ image_tar }}"
        mode: '0644'

    - name: Load Docker image from tar
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: "{{ image_tag }}"
        source: load
        load_path: "{{ image_tar }}"

    - name: Remove old staging container if present
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true

    - name: Run staging container (bind to localhost:{{ app_port }})
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        platform: linux/amd64
        state: started
        restart_policy: always
        published_ports:
          - "127.0.0.1:{{ app_port }}:8000"
        env:
          DJANGO_SETTINGS_MODULE: employee_directory.settings

    # ---- NEW: verify the app itself is serving on the container port ----
    - name: Wait for app on container port
      uri:
        url: "http://127.0.0.1:{{ app_port }}/"
        status_code: 200
      register: app_port_check
      retries: 20
      delay: 2
      until: app_port_check.status == 200

    - name: Configure Nginx reverse proxy to the app
      copy:
        dest: /etc/nginx/conf.d/employee.conf
        content: |
          upstream app_upstream { server 127.0.0.1:{{ app_port }}; }
          server {
            listen 80;
            server_name _;  # match any host, safer for local/health checks
            location / {
              proxy_pass http://app_upstream;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
          }

    - name: Disable default site (avoid conflicts)
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test nginx config
      command: nginx -t
      register: nginx_test
      changed_when: false

    - name: Show nginx test output
      debug:
        var: nginx_test.stderr_lines

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    # ---- Health check via Nginx (send proper Host header) ----
    - name: Health check through Nginx
      uri:
        url: "http://127.0.0.1/"
        headers:
          Host: "{{ domain_name | default('localhost') }}"
        status_code: 200
      register: nginx_check
      retries: 10
      delay: 3
      until: nginx_check.status == 200

    # ---- Helpful diagnostics if something still breaks ----
    - name: Show container status
      command: docker ps --format '{{ "{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}" }}'
      register: dps
      changed_when: false

    - debug:
        var: dps.stdout_lines

    - name: Tail app logs
      command: docker logs --tail=100 {{ container_name }}
      register: dlogs
      changed_when: false
      failed_when: false

    - debug:
        var: dlogs.stdout_lines
